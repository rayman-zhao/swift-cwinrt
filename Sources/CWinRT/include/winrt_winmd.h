// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_Cwinrt__winmd_CIConstant_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIConstant_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIConstant __x_ABI_Cwinrt__winmd_CIConstant;

#endif // ____x_ABI_Cwinrt__winmd_CIConstant_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CICustomAttribute_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CICustomAttribute_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CICustomAttribute __x_ABI_Cwinrt__winmd_CICustomAttribute;

#endif // ____x_ABI_Cwinrt__winmd_CICustomAttribute_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CICustomAttributeSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CICustomAttributeSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CICustomAttributeSig __x_ABI_Cwinrt__winmd_CICustomAttributeSig;

#endif // ____x_ABI_Cwinrt__winmd_CICustomAttributeSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIElemSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIElemSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIElemSig __x_ABI_Cwinrt__winmd_CIElemSig;

#endif // ____x_ABI_Cwinrt__winmd_CIElemSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIEvent_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIEvent_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIEvent __x_ABI_Cwinrt__winmd_CIEvent;

#endif // ____x_ABI_Cwinrt__winmd_CIEvent_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIField_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIField_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIField __x_ABI_Cwinrt__winmd_CIField;

#endif // ____x_ABI_Cwinrt__winmd_CIField_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIFieldSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIFieldSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIFieldSig __x_ABI_Cwinrt__winmd_CIFieldSig;

#endif // ____x_ABI_Cwinrt__winmd_CIFieldSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIFixedArgSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIFixedArgSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIFixedArgSig __x_ABI_Cwinrt__winmd_CIFixedArgSig;

#endif // ____x_ABI_Cwinrt__winmd_CIFixedArgSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIGenericTypeInstSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIGenericTypeInstSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIGenericTypeInstSig __x_ABI_Cwinrt__winmd_CIGenericTypeInstSig;

#endif // ____x_ABI_Cwinrt__winmd_CIGenericTypeInstSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIInterfaceImpl_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIInterfaceImpl_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIInterfaceImpl __x_ABI_Cwinrt__winmd_CIInterfaceImpl;

#endif // ____x_ABI_Cwinrt__winmd_CIInterfaceImpl_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIMethodAttributes_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIMethodAttributes_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIMethodAttributes __x_ABI_Cwinrt__winmd_CIMethodAttributes;

#endif // ____x_ABI_Cwinrt__winmd_CIMethodAttributes_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIMethodDef_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIMethodDef_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIMethodDef __x_ABI_Cwinrt__winmd_CIMethodDef;

#endif // ____x_ABI_Cwinrt__winmd_CIMethodDef_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIMethodDefSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIMethodDefSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIMethodDefSig __x_ABI_Cwinrt__winmd_CIMethodDefSig;

#endif // ____x_ABI_Cwinrt__winmd_CIMethodDefSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIMethodSemantics_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIMethodSemantics_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIMethodSemantics __x_ABI_Cwinrt__winmd_CIMethodSemantics;

#endif // ____x_ABI_Cwinrt__winmd_CIMethodSemantics_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes __x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes;

#endif // ____x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CINamedArgSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CINamedArgSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CINamedArgSig __x_ABI_Cwinrt__winmd_CINamedArgSig;

#endif // ____x_ABI_Cwinrt__winmd_CINamedArgSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CINamespace_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CINamespace_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CINamespace __x_ABI_Cwinrt__winmd_CINamespace;

#endif // ____x_ABI_Cwinrt__winmd_CINamespace_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIParam_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIParam_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIParam __x_ABI_Cwinrt__winmd_CIParam;

#endif // ____x_ABI_Cwinrt__winmd_CIParam_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIParamAttributes_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIParamAttributes_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIParamAttributes __x_ABI_Cwinrt__winmd_CIParamAttributes;

#endif // ____x_ABI_Cwinrt__winmd_CIParamAttributes_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIParamSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIParamSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIParamSig __x_ABI_Cwinrt__winmd_CIParamSig;

#endif // ____x_ABI_Cwinrt__winmd_CIParamSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIProperty_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIProperty_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIProperty __x_ABI_Cwinrt__winmd_CIProperty;

#endif // ____x_ABI_Cwinrt__winmd_CIProperty_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIPropertySig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIPropertySig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIPropertySig __x_ABI_Cwinrt__winmd_CIPropertySig;

#endif // ____x_ABI_Cwinrt__winmd_CIPropertySig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIRetTypeSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIRetTypeSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIRetTypeSig __x_ABI_Cwinrt__winmd_CIRetTypeSig;

#endif // ____x_ABI_Cwinrt__winmd_CIRetTypeSig_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIRoot_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIRoot_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIRoot __x_ABI_Cwinrt__winmd_CIRoot;

#endif // ____x_ABI_Cwinrt__winmd_CIRoot_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CIRootFactory_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CIRootFactory_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CIRootFactory __x_ABI_Cwinrt__winmd_CIRootFactory;

#endif // ____x_ABI_Cwinrt__winmd_CIRootFactory_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CITypeDef_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CITypeDef_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CITypeDef __x_ABI_Cwinrt__winmd_CITypeDef;

#endif // ____x_ABI_Cwinrt__winmd_CITypeDef_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CITypeRef_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CITypeRef_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CITypeRef __x_ABI_Cwinrt__winmd_CITypeRef;

#endif // ____x_ABI_Cwinrt__winmd_CITypeRef_FWD_DEFINED__

#ifndef ____x_ABI_Cwinrt__winmd_CITypeSig_FWD_DEFINED__
#define ____x_ABI_Cwinrt__winmd_CITypeSig_FWD_DEFINED__
    typedef interface __x_ABI_Cwinrt__winmd_CITypeSig __x_ABI_Cwinrt__winmd_CITypeSig;

#endif // ____x_ABI_Cwinrt__winmd_CITypeSig_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        __x_ABI_Cwinrt__winmd_CICustomAttribute** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CICustomAttribute** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        __x_ABI_Cwinrt__winmd_CIElemSig** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIElemSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CElemSig** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEventVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        __x_ABI_Cwinrt__winmd_CIEvent** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIEvent** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEventVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEventVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEventVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CEvent** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEventVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEventVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This,
        __x_ABI_Cwinrt__winmd_CIField** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIField** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CField** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        __x_ABI_Cwinrt__winmd_CIFixedArgSig** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIFixedArgSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        __x_ABI_Cwinrt__winmd_CIInterfaceImpl** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIInterfaceImpl** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        __x_ABI_Cwinrt__winmd_CIMethodDef** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIMethodDef** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodDef** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        __x_ABI_Cwinrt__winmd_CIMethodSemantics** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIMethodSemantics** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        __x_ABI_Cwinrt__winmd_CINamedArgSig** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CINamedArgSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        __x_ABI_Cwinrt__winmd_CINamespace** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CINamespace** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CNamespace** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        __x_ABI_Cwinrt__winmd_CIParam** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIParam** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParam** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        __x_ABI_Cwinrt__winmd_CIParamSig** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIParamSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CParamSig** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        __x_ABI_Cwinrt__winmd_CIProperty** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIProperty** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CProperty** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        __x_ABI_Cwinrt__winmd_CITypeDef** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CITypeDef** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeDef** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        __x_ABI_Cwinrt__winmd_CITypeSig** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CITypeSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        __x_ABI_C__FIIterator_1___x_ABI_Cwinrt__zwinmd__CTypeSig** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CICustomAttribute** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        __x_ABI_Cwinrt__winmd_CICustomAttribute* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CICustomAttribute** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttributeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIElemSig** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        __x_ABI_Cwinrt__winmd_CIElemSig* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIElemSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEventVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIEvent** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        __x_ABI_Cwinrt__winmd_CIEvent* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIEvent** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEventVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEventVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIField** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This,
        __x_ABI_Cwinrt__winmd_CIField* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIField** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFieldVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIFixedArgSig** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        __x_ABI_Cwinrt__winmd_CIFixedArgSig* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIFixedArgSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIInterfaceImpl** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        __x_ABI_Cwinrt__winmd_CIInterfaceImpl* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIInterfaceImpl** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImplVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIMethodDef** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        __x_ABI_Cwinrt__winmd_CIMethodDef* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIMethodDef** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDefVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIMethodSemantics** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        __x_ABI_Cwinrt__winmd_CIMethodSemantics* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIMethodSemantics** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemanticsVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CINamedArgSig** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        __x_ABI_Cwinrt__winmd_CINamedArgSig* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CINamedArgSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CINamespace** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        __x_ABI_Cwinrt__winmd_CINamespace* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CINamespace** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespaceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIParam** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        __x_ABI_Cwinrt__winmd_CIParam* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIParam** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIParamSig** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        __x_ABI_Cwinrt__winmd_CIParamSig* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIParamSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CIProperty** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        __x_ABI_Cwinrt__winmd_CIProperty* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CIProperty** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CPropertyVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CITypeDef** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        __x_ABI_Cwinrt__winmd_CITypeDef* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CITypeDef** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDefVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        UINT32 index,
        __x_ABI_Cwinrt__winmd_CITypeSig** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        __x_ABI_Cwinrt__winmd_CITypeSig* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_Cwinrt__winmd_CITypeSig** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSigVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig_INTERFACE_DEFINED__
    
typedef enum __x_ABI_Cwinrt__winmd_CConstantType __x_ABI_Cwinrt__winmd_CConstantType;

typedef enum __x_ABI_Cwinrt__winmd_CElementType __x_ABI_Cwinrt__winmd_CElementType;

enum __x_ABI_Cwinrt__winmd_CConstantType
    {
        __x_ABI_Cwinrt__winmd_CConstantType_Boolean = 2,
    __x_ABI_Cwinrt__winmd_CConstantType_Char = 3,
    __x_ABI_Cwinrt__winmd_CConstantType_Int8 = 4,
    __x_ABI_Cwinrt__winmd_CConstantType_UInt8 = 5,
    __x_ABI_Cwinrt__winmd_CConstantType_Int16 = 6,
    __x_ABI_Cwinrt__winmd_CConstantType_UInt16 = 7,
    __x_ABI_Cwinrt__winmd_CConstantType_Int32 = 8,
    __x_ABI_Cwinrt__winmd_CConstantType_UInt32 = 9,
    __x_ABI_Cwinrt__winmd_CConstantType_Int64 = 10,
    __x_ABI_Cwinrt__winmd_CConstantType_UInt64 = 11,
    __x_ABI_Cwinrt__winmd_CConstantType_Float32 = 12,
    __x_ABI_Cwinrt__winmd_CConstantType_Float64 = 13,
    __x_ABI_Cwinrt__winmd_CConstantType_String = 14,
    __x_ABI_Cwinrt__winmd_CConstantType_Class = 18,
};

enum __x_ABI_Cwinrt__winmd_CElementType
    {
        __x_ABI_Cwinrt__winmd_CElementType_End = 0,
    __x_ABI_Cwinrt__winmd_CElementType_Void = 0x1,
    __x_ABI_Cwinrt__winmd_CElementType_Boolean = 0x2,
    __x_ABI_Cwinrt__winmd_CElementType_Char = 0x3,
    __x_ABI_Cwinrt__winmd_CElementType_I1 = 0x4,
    __x_ABI_Cwinrt__winmd_CElementType_U1 = 0x5,
    __x_ABI_Cwinrt__winmd_CElementType_I2 = 0x6,
    __x_ABI_Cwinrt__winmd_CElementType_U2 = 0x7,
    __x_ABI_Cwinrt__winmd_CElementType_I4 = 0x8,
    __x_ABI_Cwinrt__winmd_CElementType_U4 = 0x9,
    __x_ABI_Cwinrt__winmd_CElementType_I8 = 0xa,
    __x_ABI_Cwinrt__winmd_CElementType_U8 = 0xb,
    __x_ABI_Cwinrt__winmd_CElementType_R4 = 0xc,
    __x_ABI_Cwinrt__winmd_CElementType_R8 = 0xd,
    __x_ABI_Cwinrt__winmd_CElementType_String = 0xe,
    __x_ABI_Cwinrt__winmd_CElementType_Ptr = 0xf,
    __x_ABI_Cwinrt__winmd_CElementType_ByRef = 0x10,
    __x_ABI_Cwinrt__winmd_CElementType_ValueType = 0x11,
    __x_ABI_Cwinrt__winmd_CElementType_Class = 0x12,
    __x_ABI_Cwinrt__winmd_CElementType_Var = 0x13,
    __x_ABI_Cwinrt__winmd_CElementType_Array = 0x14,
    __x_ABI_Cwinrt__winmd_CElementType_GenericInst = 0x15,
    __x_ABI_Cwinrt__winmd_CElementType_TypedByRef = 0x16,
    __x_ABI_Cwinrt__winmd_CElementType_I = 0x18,
    __x_ABI_Cwinrt__winmd_CElementType_U = 0x19,
    __x_ABI_Cwinrt__winmd_CElementType_FnPtr = 0x1b,
    __x_ABI_Cwinrt__winmd_CElementType_Object = 0x1c,
    __x_ABI_Cwinrt__winmd_CElementType_SZArray = 0x1d,
    __x_ABI_Cwinrt__winmd_CElementType_MVar = 0x1e,
    __x_ABI_Cwinrt__winmd_CElementType_CModReqd = 0x1f,
    __x_ABI_Cwinrt__winmd_CElementType_CModOpt = 0x20,
    __x_ABI_Cwinrt__winmd_CElementType_Internal = 0x21,
    __x_ABI_Cwinrt__winmd_CElementType_Modifier = 0x40,
    __x_ABI_Cwinrt__winmd_CElementType_Sentinel = 0x41,
    __x_ABI_Cwinrt__winmd_CElementType_Pinned = 0x45,
    __x_ABI_Cwinrt__winmd_CElementType_Type = 0x50,
    __x_ABI_Cwinrt__winmd_CElementType_TaggedObject = 0x51,
    __x_ABI_Cwinrt__winmd_CElementType_Field = 0x53,
    __x_ABI_Cwinrt__winmd_CElementType_Property = 0x54,
    __x_ABI_Cwinrt__winmd_CElementType_Enum = 0x55,
};

#if !defined(____x_ABI_Cwinrt__winmd_CIConstant_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIConstant_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIConstantVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIConstant* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIConstant* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIConstant* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIConstant* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIConstant* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIConstant* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_Cwinrt__winmd_CIConstant* This,
        enum __x_ABI_Cwinrt__winmd_CConstantType* value);
    HRESULT (STDMETHODCALLTYPE* get_Valid)(__x_ABI_Cwinrt__winmd_CIConstant* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ValueInt32)(__x_ABI_Cwinrt__winmd_CIConstant* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_ValueUInt32)(__x_ABI_Cwinrt__winmd_CIConstant* This,
        UINT32* value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIConstantVtbl;

    interface __x_ABI_Cwinrt__winmd_CIConstant
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIConstantVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIConstant;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIConstant_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CICustomAttribute_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CICustomAttribute_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CICustomAttributeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TypeNamespace)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TypeName)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_Cwinrt__winmd_CICustomAttribute* This,
        __x_ABI_Cwinrt__winmd_CICustomAttributeSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CICustomAttributeVtbl;

    interface __x_ABI_Cwinrt__winmd_CICustomAttribute
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CICustomAttributeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CICustomAttribute;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CICustomAttribute_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CICustomAttributeSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CICustomAttributeSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CICustomAttributeSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CICustomAttributeSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CICustomAttributeSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CICustomAttributeSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CICustomAttributeSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CICustomAttributeSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CICustomAttributeSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_FixedArgs)(__x_ABI_Cwinrt__winmd_CICustomAttributeSig* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CFixedArgSig** value);
    HRESULT (STDMETHODCALLTYPE* get_NamedArgs)(__x_ABI_Cwinrt__winmd_CICustomAttributeSig* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamedArgSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CICustomAttributeSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CICustomAttributeSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CICustomAttributeSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CICustomAttributeSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CICustomAttributeSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIElemSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIElemSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIElemSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIElemSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIElemSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HasSystemType)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SystemType)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HasStringValue)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_StringValue)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_HasInt32Value)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Int32Value)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_HasUInt32Value)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_UInt32Value)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_HasUInt16Value)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_UInt16Value)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        UINT16* value);
    HRESULT (STDMETHODCALLTYPE* get_HasByteValue)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ByteValue)(__x_ABI_Cwinrt__winmd_CIElemSig* This,
        BYTE* value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIElemSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CIElemSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIElemSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIElemSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIElemSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIEvent_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIEvent_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIEventVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIEvent* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIEvent* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIEvent* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIEvent* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIEvent* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIEvent* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_Cwinrt__winmd_CIEvent* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CustomAttributes)(__x_ABI_Cwinrt__winmd_CIEvent* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute** value);
    HRESULT (STDMETHODCALLTYPE* get_HasEventTypeDef)(__x_ABI_Cwinrt__winmd_CIEvent* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_EventTypeDef)(__x_ABI_Cwinrt__winmd_CIEvent* This,
        __x_ABI_Cwinrt__winmd_CITypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_HasEventTypeRef)(__x_ABI_Cwinrt__winmd_CIEvent* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_EventTypeRef)(__x_ABI_Cwinrt__winmd_CIEvent* This,
        __x_ABI_Cwinrt__winmd_CITypeRef** value);
    HRESULT (STDMETHODCALLTYPE* get_HasGenericTypeInstSig)(__x_ABI_Cwinrt__winmd_CIEvent* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_GenericTypeInstSig)(__x_ABI_Cwinrt__winmd_CIEvent* This,
        __x_ABI_Cwinrt__winmd_CIGenericTypeInstSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIEventVtbl;

    interface __x_ABI_Cwinrt__winmd_CIEvent
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIEventVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIEvent;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIEvent_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIField_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIField_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIFieldVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIField* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIField* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIField* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIField* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIField* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIField* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Constant)(__x_ABI_Cwinrt__winmd_CIField* This,
        __x_ABI_Cwinrt__winmd_CIConstant** value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_Cwinrt__winmd_CIField* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_CustomAttributes)(__x_ABI_Cwinrt__winmd_CIField* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute** value);
    HRESULT (STDMETHODCALLTYPE* get_Signature)(__x_ABI_Cwinrt__winmd_CIField* This,
        __x_ABI_Cwinrt__winmd_CIFieldSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIFieldVtbl;

    interface __x_ABI_Cwinrt__winmd_CIField
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIFieldVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIField;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIField_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIFieldSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIFieldSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIFieldSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIFieldSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIFieldSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIFieldSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIFieldSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIFieldSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIFieldSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_Cwinrt__winmd_CIFieldSig* This,
        __x_ABI_Cwinrt__winmd_CITypeSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIFieldSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CIFieldSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIFieldSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIFieldSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIFieldSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIFixedArgSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIFixedArgSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIFixedArgSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HasElemSigs)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ElemSigs)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CElemSig** value);
    HRESULT (STDMETHODCALLTYPE* get_HasElemSig)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ElemSig)(__x_ABI_Cwinrt__winmd_CIFixedArgSig* This,
        __x_ABI_Cwinrt__winmd_CIElemSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIFixedArgSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CIFixedArgSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIFixedArgSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIFixedArgSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIFixedArgSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIGenericTypeInstSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIGenericTypeInstSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIGenericTypeInstSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ClassOrValueType)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
        enum __x_ABI_Cwinrt__winmd_CElementType* value);
    HRESULT (STDMETHODCALLTYPE* get_HasGenericTypeDef)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_GenericTypeDef)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
        __x_ABI_Cwinrt__winmd_CITypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_HasGenericTypeRef)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_GenericTypeRef)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
        __x_ABI_Cwinrt__winmd_CITypeRef** value);
    HRESULT (STDMETHODCALLTYPE* get_GenericArgs)(__x_ABI_Cwinrt__winmd_CIGenericTypeInstSig* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIGenericTypeInstSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CIGenericTypeInstSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIGenericTypeInstSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIGenericTypeInstSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIGenericTypeInstSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIInterfaceImpl_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIInterfaceImpl_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIInterfaceImplVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Class)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
        __x_ABI_Cwinrt__winmd_CITypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_HasTypeDef)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_TypeDef)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
        __x_ABI_Cwinrt__winmd_CITypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_HasTypeRef)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_TypeRef)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
        __x_ABI_Cwinrt__winmd_CITypeRef** value);
    HRESULT (STDMETHODCALLTYPE* get_HasGenericTypeInstSig)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_GenericTypeInstSig)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
        __x_ABI_Cwinrt__winmd_CIGenericTypeInstSig** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomAttributes)(__x_ABI_Cwinrt__winmd_CIInterfaceImpl* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIInterfaceImplVtbl;

    interface __x_ABI_Cwinrt__winmd_CIInterfaceImpl
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIInterfaceImplVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIInterfaceImpl;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIInterfaceImpl_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIMethodAttributes_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIMethodAttributes_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIMethodAttributesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Static)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Final)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Virtual)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HideBySig)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Strict)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Abstract)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_SpecialName)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_PInvokeImpl)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_UnmanagedExport)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_RTSpecialName)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasSecurity)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_RequireSecObject)(__x_ABI_Cwinrt__winmd_CIMethodAttributes* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIMethodAttributesVtbl;

    interface __x_ABI_Cwinrt__winmd_CIMethodAttributes
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIMethodAttributesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIMethodAttributes;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIMethodAttributes_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIMethodDef_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIMethodDef_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIMethodDefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIMethodDef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIMethodDef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Flags)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
        __x_ABI_Cwinrt__winmd_CIMethodAttributes** value);
    HRESULT (STDMETHODCALLTYPE* get_SpecialName)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Signature)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
        __x_ABI_Cwinrt__winmd_CIMethodDefSig** value);
    HRESULT (STDMETHODCALLTYPE* get_ParamList)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParam** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomAttributes)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute** value);
    HRESULT (STDMETHODCALLTYPE* get_Parent)(__x_ABI_Cwinrt__winmd_CIMethodDef* This,
        __x_ABI_Cwinrt__winmd_CITypeDef** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIMethodDefVtbl;

    interface __x_ABI_Cwinrt__winmd_CIMethodDef
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIMethodDefVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIMethodDef;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIMethodDef_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIMethodDefSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIMethodDefSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIMethodDefSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIMethodDefSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIMethodDefSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIMethodDefSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIMethodDefSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIMethodDefSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIMethodDefSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ReturnType)(__x_ABI_Cwinrt__winmd_CIMethodDefSig* This,
        __x_ABI_Cwinrt__winmd_CIRetTypeSig** value);
    HRESULT (STDMETHODCALLTYPE* get_Params)(__x_ABI_Cwinrt__winmd_CIMethodDefSig* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CParamSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIMethodDefSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CIMethodDefSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIMethodDefSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIMethodDefSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIMethodDefSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIMethodSemantics_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIMethodSemantics_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIMethodSemanticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIMethodSemantics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIMethodSemantics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIMethodSemantics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIMethodSemantics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIMethodSemantics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIMethodSemantics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Semantic)(__x_ABI_Cwinrt__winmd_CIMethodSemantics* This,
        __x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIMethodSemanticsVtbl;

    interface __x_ABI_Cwinrt__winmd_CIMethodSemantics
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIMethodSemanticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIMethodSemantics;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIMethodSemantics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Setter)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Getter)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Other)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_AddOn)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_RemoveOn)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Fire)(__x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributesVtbl;

    interface __x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIMethodSemanticsAttributes_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CINamedArgSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CINamedArgSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CINamedArgSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CINamedArgSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CINamedArgSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CINamedArgSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CINamedArgSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CINamedArgSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CINamedArgSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_Cwinrt__winmd_CINamedArgSig* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_Cwinrt__winmd_CINamedArgSig* This,
        __x_ABI_Cwinrt__winmd_CIFixedArgSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CINamedArgSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CINamedArgSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CINamedArgSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CINamedArgSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CINamedArgSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CINamespace_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CINamespace_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CINamespaceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CINamespace* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CINamespace* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CINamespace* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CINamespace* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CINamespace* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CINamespace* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_Cwinrt__winmd_CINamespace* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Classes)(__x_ABI_Cwinrt__winmd_CINamespace* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_Delegates)(__x_ABI_Cwinrt__winmd_CINamespace* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_Enums)(__x_ABI_Cwinrt__winmd_CINamespace* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_Interfaces)(__x_ABI_Cwinrt__winmd_CINamespace* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_Structs)(__x_ABI_Cwinrt__winmd_CINamespace* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CTypeDef** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CINamespaceVtbl;

    interface __x_ABI_Cwinrt__winmd_CINamespace
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CINamespaceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CINamespace;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CINamespace_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIParam_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIParam_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIParamVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIParam* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIParam* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIParam* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIParam* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIParam* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIParam* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_Cwinrt__winmd_CIParam* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Flags)(__x_ABI_Cwinrt__winmd_CIParam* This,
        __x_ABI_Cwinrt__winmd_CIParamAttributes** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIParamVtbl;

    interface __x_ABI_Cwinrt__winmd_CIParam
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIParamVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIParam;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIParam_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIParamAttributes_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIParamAttributes_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIParamAttributesVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_In)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Out)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Optional)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasDefault)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasFieldMarshal)(__x_ABI_Cwinrt__winmd_CIParamAttributes* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIParamAttributesVtbl;

    interface __x_ABI_Cwinrt__winmd_CIParamAttributes
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIParamAttributesVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIParamAttributes;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIParamAttributes_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIParamSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIParamSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIParamSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIParamSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIParamSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIParamSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIParamSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIParamSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIParamSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ByRef)(__x_ABI_Cwinrt__winmd_CIParamSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_Cwinrt__winmd_CIParamSig* This,
        __x_ABI_Cwinrt__winmd_CITypeSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIParamSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CIParamSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIParamSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIParamSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIParamSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIProperty_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIProperty_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIPropertyVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIProperty* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIProperty* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIProperty* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIProperty* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIProperty* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIProperty* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_Cwinrt__winmd_CIProperty* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_Cwinrt__winmd_CIProperty* This,
        __x_ABI_Cwinrt__winmd_CIPropertySig** value);
    HRESULT (STDMETHODCALLTYPE* get_MethodSemantic)(__x_ABI_Cwinrt__winmd_CIProperty* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodSemantics** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomAttributes)(__x_ABI_Cwinrt__winmd_CIProperty* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIPropertyVtbl;

    interface __x_ABI_Cwinrt__winmd_CIProperty
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIPropertyVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIProperty;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIProperty_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIPropertySig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIPropertySig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIPropertySigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIPropertySig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIPropertySig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIPropertySig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIPropertySig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIPropertySig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIPropertySig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_Cwinrt__winmd_CIPropertySig* This,
        __x_ABI_Cwinrt__winmd_CITypeSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIPropertySigVtbl;

    interface __x_ABI_Cwinrt__winmd_CIPropertySig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIPropertySigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIPropertySig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIPropertySig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIRetTypeSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIRetTypeSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIRetTypeSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ByRef)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasType)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Type)(__x_ABI_Cwinrt__winmd_CIRetTypeSig* This,
        __x_ABI_Cwinrt__winmd_CITypeSig** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIRetTypeSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CIRetTypeSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIRetTypeSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIRetTypeSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIRetTypeSig_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIRoot_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIRoot_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIRootVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIRoot* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIRoot* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIRoot* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIRoot* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIRoot* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIRoot* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Namespaces)(__x_ABI_Cwinrt__winmd_CIRoot* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CNamespace** value);
    HRESULT (STDMETHODCALLTYPE* Find)(__x_ABI_Cwinrt__winmd_CIRoot* This,
        HSTRING namespaceName,
        HSTRING name,
        __x_ABI_Cwinrt__winmd_CITypeDef** result);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIRootVtbl;

    interface __x_ABI_Cwinrt__winmd_CIRoot
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIRootVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIRoot;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIRoot_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CIRootFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CIRootFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CIRootFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CIRootFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CIRootFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CIRootFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CIRootFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CIRootFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CIRootFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_Cwinrt__winmd_CIRootFactory* This,
        __x_ABI_C__FIVectorView_1_HSTRING* fileNames,
        __x_ABI_Cwinrt__winmd_CIRoot** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CIRootFactoryVtbl;

    interface __x_ABI_Cwinrt__winmd_CIRootFactory
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CIRootFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CIRootFactory;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CIRootFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CITypeDef_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CITypeDef_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CITypeDefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CITypeDef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CITypeDef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsValid)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsInterface)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsStruct)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsEnum)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_HasGenericParams)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_Name)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Namespace)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_FieldList)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CField** value);
    HRESULT (STDMETHODCALLTYPE* get_InterfaceImpls)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CInterfaceImpl** value);
    HRESULT (STDMETHODCALLTYPE* get_CustomAttributes)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CCustomAttribute** value);
    HRESULT (STDMETHODCALLTYPE* get_MethodList)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CMethodDef** value);
    HRESULT (STDMETHODCALLTYPE* get_PropertyList)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CProperty** value);
    HRESULT (STDMETHODCALLTYPE* get_EventList)(__x_ABI_Cwinrt__winmd_CITypeDef* This,
        __x_ABI_C__FIVectorView_1___x_ABI_Cwinrt__zwinmd__CEvent** value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CITypeDefVtbl;

    interface __x_ABI_Cwinrt__winmd_CITypeDef
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CITypeDefVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CITypeDef;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CITypeDef_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CITypeRef_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CITypeRef_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CITypeRefVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CITypeRef* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CITypeRef* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CITypeRef* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CITypeRef* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CITypeRef* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CITypeRef* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_TypeName)(__x_ABI_Cwinrt__winmd_CITypeRef* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_TypeNamespace)(__x_ABI_Cwinrt__winmd_CITypeRef* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CITypeRefVtbl;

    interface __x_ABI_Cwinrt__winmd_CITypeRef
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CITypeRefVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CITypeRef;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CITypeRef_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_Cwinrt__winmd_CITypeSig_INTERFACE_DEFINED__)
    #define ____x_ABI_Cwinrt__winmd_CITypeSig_INTERFACE_DEFINED__
    typedef struct __x_ABI_Cwinrt__winmd_CITypeSigVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_Cwinrt__winmd_CITypeSig* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_Cwinrt__winmd_CITypeSig* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_HasTypeDef)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_TypeDef)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        __x_ABI_Cwinrt__winmd_CITypeDef** value);
    HRESULT (STDMETHODCALLTYPE* get_HasTypeRef)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_TypeRef)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        __x_ABI_Cwinrt__winmd_CITypeRef** value);
    HRESULT (STDMETHODCALLTYPE* get_HasElementType)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_ElementType)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        enum __x_ABI_Cwinrt__winmd_CElementType* value);
    HRESULT (STDMETHODCALLTYPE* get_HasGenericTypeIndex)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_GenericTypeIndex)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_HasGenericTypeInstSig)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_GenericTypeInstSig)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        __x_ABI_Cwinrt__winmd_CIGenericTypeInstSig** value);
    HRESULT (STDMETHODCALLTYPE* get_HasGenericMethodTypeIndex)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_GenericMethodTypeIndex)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* get_IsArray)(__x_ABI_Cwinrt__winmd_CITypeSig* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_Cwinrt__winmd_CITypeSigVtbl;

    interface __x_ABI_Cwinrt__winmd_CITypeSig
    {
        CONST_VTBL struct __x_ABI_Cwinrt__winmd_CITypeSigVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_Cwinrt__winmd_CITypeSig;
#endif /* !defined(____x_ABI_Cwinrt__winmd_CITypeSig_INTERFACE_DEFINED__) */
    
